import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Builds on RSSReader by reading multiple feeds and outputting an HTML page
 * linking to feed reader pages.
 *
 * @author Mohammed Maalin
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head><body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        XMLTree titleNode = channel.child(getChildElement(channel, "title"));
        XMLTree linkNode = channel.child(getChildElement(channel, "link"));
        XMLTree descriptionNode = channel
                .child(getChildElement(channel, "description"));

        String title = "No title available. This is an RSS feed reader";
        if (titleNode.numberOfChildren() > 0) {
            title = titleNode.child(0).label();
        }
        String link = linkNode.child(0).label();

        String description = "No description available";
        if (descriptionNode.numberOfChildren() > 0) {
            description = descriptionNode.child(0).label();
        }

        out.println("<html><head><title>" + title + "</title>");
        out.println("</head><body>");
        out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("<p>");
        out.println(description);
        out.println("</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        String currentNode = "current tag";

        int i = 0;
        int indexOfChild = -1;

        boolean tagFound = false;

        while (!tagFound && i < xml.numberOfChildren()) {
            currentNode = xml.child(i).label();

            if (currentNode.equals(tag)) {
                indexOfChild = i;
                tagFound = true;
            }

            i++;
        }

        return indexOfChild;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String titleOrDescription = "No title available";
        String source = "No source available";
        String date = "No date available";

        String sourceURL = "No source";
        String newsURL = "no URL";

        int i = 0;
        i = getChildElement(item, "title");
        if (i != -1) {
            XMLTree title = item.child(i);
            if (title.numberOfChildren() > 0) {
                titleOrDescription = title.child(0).label();
            }
        } else {
            XMLTree desc = item.child(getChildElement(item, "description"));
            if (desc.numberOfChildren() > 0) {
                titleOrDescription = desc.child(0).label();
            }
        }

        i = getChildElement(item, "link");
        if (i != -1) {
            XMLTree link = item.child(i);
            newsURL = link.child(0).label();
        }

        i = getChildElement(item, "source");
        if (i != -1) {
            XMLTree sourceTree = item.child(i);
            sourceURL = sourceTree.attributeValue("url");

            if (sourceTree.numberOfChildren() > 0) {
                source = sourceTree.child(0).label();
            }
        }

        i = getChildElement(item, "pubDate");
        if (i != -1) {
            XMLTree pubDate = item.child(i);
            date = pubDate.child(0).label();
        }

        out.println("<tr>");
        out.println("<td>" + date + "</td>");

        if (source.equals("No source available")) {
            out.println("<td>" + source + "</td>");
        } else {
            out.println("<td><a href=\"" + sourceURL + "\">" + source
                    + "</a></td>");
        }

        if (newsURL.equals("no URL")) {
            out.println("<td>" + titleOrDescription + "</td>");
        } else {
            out.println("<td><a href=\"" + newsURL + "\">" + titleOrDescription
                    + "</a></td>");
        }

        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        assert out.isOpen() : "Violation of: out must be open";

        SimpleWriter fileStream = new SimpleWriter1L(file);

        XMLTree1 rss = new XMLTree1(url);

        if (rss.isTag() && rss.hasAttribute("version")
                && rss.attributeValue("version").equals("2.0")) {
            XMLTree channel = rss.child(getChildElement(rss, "channel"));

            outputHeader(channel, fileStream);

            int i = 0;

            while (i < channel.numberOfChildren()) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), fileStream);
                }
                i++;
            }

            outputFooter(fileStream);

            out.println("feed has been successfully processed");
        } else {
            out.println("Not a valid RSS feed");
        }

    }

    /**
     * Writes HTML file linking to individual RSS reader pages.
     *
     * @param feedFiles
     *            HTML files to write individual readers to
     * @param feedNames
     *            what links to readers should display
     * @param feedURLs
     *            RSS feeds to print readers of
     * @param out
     *            HTML file where link to all the readers will be
     * @param aggTitle
     *            name of aggregated feed
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [gathers individual feed information, prints page that links to feed
     *  readers]
     * </pre>
     */
    private static void writeAggregator(String[] feedFiles, String[] feedNames,
            String[] feedURLs, SimpleWriter out, String aggTitle) {
        assert out.isOpen() : "Violation of: out must be open";

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + aggTitle + "</title></head>");
        out.println("<body>");
        out.println("<h2>" + aggTitle + "</h2>");
        out.println("<ul>");

        for (int i = 0; i < feedFiles.length; i++) {
            out.println("<li><a href=\"" + feedFiles[i] + "\">" + feedNames[i]
                    + "</a></li>");
        }
        out.println("</ul>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        //http://web.cse.ohio-state.edu/software/2221/web-sw1/assignments/projects/rss-aggregator/feeds.xml

        out.println("Please provide a valid XML file with mutliple RSS feeds");
        String inputURL = in.nextLine();
        XMLTree aggFeed = new XMLTree1(inputURL);

        // testing feed validity by checking for title attribute
        if (aggFeed.hasAttribute("title")) {
            String aggFeedTitle = aggFeed.attributeValue("title");
            out.println(aggFeedTitle);

            out.println("Enter an HTML file to makse an aggregator");
            String aggPage = in.nextLine();

            int numFeeds = aggFeed.numberOfChildren();

            String[] rssFeedNames = new String[numFeeds];
            String[] rssFeedURLs = new String[numFeeds];
            String[] rssFeedFiles = new String[numFeeds];

            if (numFeeds > 0) {
                for (int i = 0; i < numFeeds; i++) {
                    rssFeedURLs[i] = aggFeed.child(i).attributeValue("url");
                    rssFeedNames[i] = aggFeed.child(i).attributeValue("name");
                    rssFeedFiles[i] = aggFeed.child(i).attributeValue("file");

                    out.println(rssFeedNames[i]);
                    processFeed(rssFeedURLs[i], rssFeedFiles[i], out);
                }

                SimpleWriter page = new SimpleWriter1L(aggPage);
                writeAggregator(rssFeedFiles, rssFeedNames, rssFeedURLs, page,
                        aggFeedTitle);
                page.close();
            } else {
                out.println("No feeds");
            }
        } else {
            out.println("Not a valid aggregated feed");
        }

        in.close();
        out.close();
    }
}
